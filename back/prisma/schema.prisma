generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  firstname     String
  lastname      String
  role          String
  password      String?
  salary        Int
  niveau        Int
  recruitmentAt DateTime
  missions      Mission[]
  formations    Formation[]
  events        Event[]
  topics        Topic[]
  comments      Comment[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Mission {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  Client      Client?  @relation(fields: [clientId], references: [id])
  clientId    Int?
}

model Client {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  email       String
  missions    Mission[]
  topics      Topic[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Formation {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  date         DateTime
  participants User[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Event {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  participants User[]
}

model Topic {
  id          Int       @id @default(autoincrement())
  title       String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById Int
  client      Client?   @relation(fields: [clientId], references: [id])
  clientId    Int?
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  topic       Topic    @relation(fields: [topicId], references: [id])
  topicId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Pass {
  id        Int      @id @default(autoincrement())
  title     String
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stage {
  id          Int      @id @default(autoincrement())
  position    Int
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reward {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
