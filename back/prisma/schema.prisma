generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  firstname     String
  lastname      String
  role          String
  password      String?
  salary        Int?         @default(autoincrement())
  niveau        Int?         @default(0)
  recruitmentAt DateTime
  technologies  Technology[]
  missions      Mission[]
  formations    Formation[]
  events        Event[]
  topics        Topic[]
  comments      Comment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Technology {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       User[]
  topics      Topic[]
  formations  Formation[]
}

model Mission {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  client      Client?  @relation(fields: [clientId], references: [id])
  clientId    Int?
}

model Client {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  email       String
  missions    Mission[]
  topics      Topic[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Formation {
  id           Int         @id @default(autoincrement())
  title        String
  description  String
  date         DateTime?
  participants User[]
  technology   Technology? @relation(fields: [technologyId], references: [id])
  technologyId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Event {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  participants User[]
}

model Topic {
  id           Int         @id @default(autoincrement())
  title        String
  content      String
  note         Float
  createdBy    User        @relation(fields: [createdById], references: [id])
  createdById  Int
  client       Client?     @relation(fields: [clientId], references: [id])
  clientId     Int?
  technologyId Int?
  technology   Technology? @relation(fields: [technologyId], references: [id])
  comments     Comment[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Comment {
  id             Int      @id @default(autoincrement())
  content        String
  createdBy      User     @relation(fields: [createdById], references: [id])
  createdById    Int
  final_response Boolean  @default(false)
  positiveVote   Int?
  negativeVote   Int?
  topic          Topic    @relation(fields: [topicId], references: [id])
  topicId        Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Pass {
  id        Int      @id @default(autoincrement())
  title     String
  startAt   DateTime
  endAt     DateTime
  stages    Stage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stage {
  id          Int      @id @default(autoincrement())
  position    Int
  title       String
  pass        Pass     @relation(fields: [passId], references: [id])
  passId      Int
  description String
  rewards     Reward[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reward {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String
  stage       Stage?   @relation(fields: [stageId], references: [id])
  stageId     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String
  author      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
